// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(IncidenceContext))]
    partial class IncidenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Property<int>("Id_Area")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description_Incidence")
                        .HasColumnType("longtext");

                    b.Property<string>("Name_Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_Area");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Core.Entities.AreaUser", b =>
                {
                    b.Property<int>("Id_AreaUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_Area")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.HasKey("Id_AreaUser");

                    b.HasIndex("Id_Area");

                    b.HasIndex("Id_User");

                    b.ToTable("AreaUser", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CategoryContact", b =>
                {
                    b.Property<int>("Id_CategoryContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContactId_Contact")
                        .HasColumnType("int");

                    b.Property<int>("Id_Category")
                        .HasColumnType("int");

                    b.Property<string>("Name_CategoryContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_CategoryContact");

                    b.HasIndex("ContactId_Contact");

                    b.ToTable("CategoryContact", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id_Contact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_Contact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id_CategoryContact")
                        .HasColumnType("int");

                    b.Property<int>("Id_TypeCon")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.HasKey("Id_Contact");

                    b.HasIndex("Id_CategoryContact");

                    b.HasIndex("Id_TypeCon");

                    b.HasIndex("Id_User");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ContactType", b =>
                {
                    b.Property<int>("Id_ContactType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_ContactType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_ContactType");

                    b.ToTable("ContactType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.DetailIncidence", b =>
                {
                    b.Property<int>("Id_DetailIncidence")
                        .HasColumnType("int");

                    b.Property<string>("Description_DetailIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id_Incidence")
                        .HasColumnType("int");

                    b.Property<int>("Id_LevelIncidence")
                        .HasColumnType("int");

                    b.Property<int>("Id_Peripheral")
                        .HasColumnType("int");

                    b.Property<int>("Id_State")
                        .HasColumnType("int");

                    b.Property<int>("Id_TypeIncidence")
                        .HasColumnType("int");

                    b.HasKey("Id_DetailIncidence");

                    b.HasIndex("Id_LevelIncidence");

                    b.HasIndex("Id_State");

                    b.HasIndex("Id_TypeIncidence");

                    b.ToTable("DetailIncidence", (string)null);
                });

            modelBuilder.Entity("Core.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id_DocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation_DocumentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ContactId_Contact")
                        .HasColumnType("int");

                    b.Property<string>("Name_DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_DocumentType");

                    b.HasIndex("ContactId_Contact");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Incidence", b =>
                {
                    b.Property<int>("Id_Incidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Description_Incidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Detail_Incidence")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Area")
                        .HasColumnType("int");

                    b.Property<int>("Id_Place")
                        .HasColumnType("int");

                    b.Property<int>("Id_State")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId_Place")
                        .HasColumnType("int");

                    b.HasKey("Id_Incidence");

                    b.HasIndex("Id_Area");

                    b.HasIndex("Id_State");

                    b.HasIndex("Id_User");

                    b.HasIndex("PlaceId_Place");

                    b.ToTable("Incidence", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LevelIncidence", b =>
                {
                    b.Property<int>("Id_LevelIncidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_LevelIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_LevelIncidence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_LevelIncidence");

                    b.ToTable("LevelIncidence", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Peripheral", b =>
                {
                    b.Property<int>("Id_Peripheral")
                        .HasColumnType("int");

                    b.Property<string>("Name_Peripheral")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_Peripheral");

                    b.ToTable("Peripheral", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Place", b =>
                {
                    b.Property<int>("Id_Place")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_Place")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Id_AreaOrigin")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name_Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_Place");

                    b.HasIndex("Id_AreaOrigin");

                    b.ToTable("Place", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id_Rol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_Rol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_Rol");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.Property<int>("Id_State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DetailIncidenceId_DetailIncidence")
                        .HasColumnType("int");

                    b.HasKey("Id_State");

                    b.HasIndex("DetailIncidenceId_DetailIncidence");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TypeIncidence", b =>
                {
                    b.Property<int>("Id_TypeIncidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description_TypeIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_TypeIncidence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_TypeIncidence");

                    b.ToTable("TypeIncidence", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address_User")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Id_DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("Id_Rol")
                        .HasColumnType("int");

                    b.Property<string>("Lastname_User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name_User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_User");

                    b.HasIndex("Id_DocumentType");

                    b.HasIndex("Id_Rol");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Core.Entities.AreaUser", b =>
                {
                    b.HasOne("Core.Entities.Area", "Area")
                        .WithMany("AreaUsers")
                        .HasForeignKey("Id_Area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("AreaUsers")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.CategoryContact", b =>
                {
                    b.HasOne("Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId_Contact");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Core.Entities.Contact", b =>
                {
                    b.HasOne("Core.Entities.CategoryContact", "CategoryContact")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_CategoryContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ContactType", "TypeOfContact")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_TypeCon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryContact");

                    b.Navigation("TypeOfContact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.DetailIncidence", b =>
                {
                    b.HasOne("Core.Entities.Incidence", "Incidence")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_DetailIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.LevelIncidence", "LevelOfIncidence")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_LevelIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.State", "State")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TypeIncidence", "TypeIncidence")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_TypeIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incidence");

                    b.Navigation("LevelOfIncidence");

                    b.Navigation("State");

                    b.Navigation("TypeIncidence");
                });

            modelBuilder.Entity("Core.Entities.DocumentType", b =>
                {
                    b.HasOne("Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId_Contact");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Core.Entities.Incidence", b =>
                {
                    b.HasOne("Core.Entities.Area", "Area")
                        .WithMany("Incidences")
                        .HasForeignKey("Id_Area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.State", "State")
                        .WithMany("Incidences")
                        .HasForeignKey("Id_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Incidences")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Place", "Place")
                        .WithMany("Incidences")
                        .HasForeignKey("PlaceId_Place");

                    b.Navigation("Area");

                    b.Navigation("Place");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Peripheral", b =>
                {
                    b.HasOne("Core.Entities.DetailIncidence", "DetailIncidence")
                        .WithMany("Peripherals")
                        .HasForeignKey("Id_Peripheral")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailIncidence");
                });

            modelBuilder.Entity("Core.Entities.Place", b =>
                {
                    b.HasOne("Core.Entities.Area", "Area")
                        .WithMany("Places")
                        .HasForeignKey("Id_AreaOrigin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.HasOne("Core.Entities.DetailIncidence", "DetailIncidence")
                        .WithMany()
                        .HasForeignKey("DetailIncidenceId_DetailIncidence");

                    b.Navigation("DetailIncidence");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.DocumentType", "DocumentType")
                        .WithMany("Users")
                        .HasForeignKey("Id_DocumentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Rol")
                        .WithMany("Users")
                        .HasForeignKey("Id_Rol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Navigation("AreaUsers");

                    b.Navigation("Incidences");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Core.Entities.CategoryContact", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Core.Entities.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Core.Entities.DetailIncidence", b =>
                {
                    b.Navigation("Peripherals");
                });

            modelBuilder.Entity("Core.Entities.DocumentType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Incidence", b =>
                {
                    b.Navigation("DetailIncidences");
                });

            modelBuilder.Entity("Core.Entities.LevelIncidence", b =>
                {
                    b.Navigation("DetailIncidences");
                });

            modelBuilder.Entity("Core.Entities.Place", b =>
                {
                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.Navigation("DetailIncidences");

                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Core.Entities.TypeIncidence", b =>
                {
                    b.Navigation("DetailIncidences");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("AreaUsers");

                    b.Navigation("Contacts");

                    b.Navigation("Incidences");
                });
#pragma warning restore 612, 618
        }
    }
}
